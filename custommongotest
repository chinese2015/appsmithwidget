import com.appsmith.external.models.BaseDomain;
 import com.mongodb.client.result.UpdateResult;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.mockito.junit.jupiter.MockitoExtension;
 import org.springframework.boot.autoconfigure.mongo.MongoProperties;
 import org.springframework.data.mongodb.MongoDatabaseFactory;
 import org.springframework.data.mongodb.core.MongoTemplate;
 import org.springframework.data.mongodb.core.convert.MongoConverter;
 import org.springframework.data.mongodb.core.mapping.MongoMappingContext;
 import org.springframework.data.mongodb.core.mapping.MongoPersistentEntity;
 import org.springframework.data.mongodb.core.mapping.MongoPersistentProperty;
 import org.springframework.data.mongodb.core.query.Query;
 import org.springframework.data.mongodb.core.query.Update;
 import org.springframework.data.mongodb.core.query.UpdateDefinition;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import static org.junit.jupiter.api.Assertions.*;
 import static org.mockito.Mockito.*;
 import org.bson.Document;

 @ExtendWith(MockitoExtension.class)
 class CustomMongoTemplateTest {

     @Mock
     private MongoDatabaseFactory mongoDbFactory;

     @Mock
     private MongoConverter mongoConverter;

     @Mock
     private MongoProperties mongoProperties;

     @Mock
     private MongoTemplate mongoTemplate; // Mock 原生的 MongoTemplate

     @Mock
     private MongoMappingContext mappingContext; //Mock mappingContext

     @InjectMocks // 注入 mocks 到 CustomMongoTemplate
     private CustomMongoTemplate customMongoTemplate;

     @BeforeEach
     void setUp() {
         MockitoAnnotations.openMocks(this);
         // 可以在这里设置一些通用的 mock 行为，例如：
         when(mongoConverter.getMappingContext()).thenReturn(mappingContext);

     }

     // 1. 测试 isCosmosDB()
     @Test
     void isCosmosDB_withCosmosDBUri_returnsTrue() {
         when(mongoProperties.getUri()).thenReturn("mongodb://user:password@host.mongo.cosmos.azure.com:10255/db?ssl=true");
         assertTrue(customMongoTemplate.isCosmosDB());

         when(mongoProperties.getUri()).thenReturn("mongodb://user:password@cosmos.azure.com:10255/db?ssl=true");
         assertTrue(customMongoTemplate.isCosmosDB());

         when(mongoProperties.getUri()).thenReturn("mongodb://user:password@something.host.com:10255/db?ssl=true&retrywrites=false");
         assertTrue(customMongoTemplate.isCosmosDB());
     }

     @Test
     void isCosmosDB_withNonCosmosDBUri_returnsFalse() {
         when(mongoProperties.getUri()).thenReturn("mongodb://user:password@localhost:27017/db");
         assertFalse(customMongoTemplate.isCosmosDB());
     }

     @Test
     void isCosmosDB_withNullUri_returnsFalse() {
         when(mongoProperties.getUri()).thenReturn(null);
         assertFalse(customMongoTemplate.isCosmosDB());
     }
     
     //辅助测试用的BaseDomain子类
      static class TestDomain extends BaseDomain {
         String name;

         public TestDomain(String id, String name) {
             this.setId(id);
             this.name = name;
         }
     }
     // 2. 测试 updateMulti() - 非 CosmosDB 环境
     @Test
     void updateMulti_nonCosmosDB_delegatesToSuper() {
          // Arrange
          Query query = new Query();
          Update update = new Update();
          Class<TestDomain> entityClass = TestDomain.class;
          UpdateResult expectedResult = UpdateResult.acknowledged(1, 1L, null);

          when(mongoProperties.getUri()).thenReturn("mongodb://localhost:27017/test"); // 非 CosmosDB
          // Mock super.updateMulti 的行为， 使用 thenAnswer 直接调用真实的CustomMongoTemplate的super.updateMulti
          when(mongoTemplate.updateMulti(any(), any(), eq(TestDomain.class))).thenReturn(expectedResult);


          CustomMongoTemplate spyCustomMongoTemplate = spy(new CustomMongoTemplate(mongoDbFactory, mongoConverter, mongoProperties));
          doReturn(expectedResult).when(spyCustomMongoTemplate).updateMulti(any(Query.class), any(UpdateDefinition.class), eq(entityClass));

          // Act
          UpdateResult actualResult = spyCustomMongoTemplate.updateMulti(query, update, entityClass);

          // Assert
          assertEquals(expectedResult, actualResult);
          //verify(mongoTemplate).updateMulti(query, update, entityClass); // 验证调用了父类的方法
      }


     // 3. 测试 updateMulti() - CosmosDB 环境，小批量，直接更新
     @Test
     void updateMulti_cosmosDB_smallBatch_success() {
         Query query = new Query();
         Update update = new Update();
         Class<TestDomain> entityClass = TestDomain.class;
         UpdateResult expectedResult = UpdateResult.acknowledged(5, 5L, null);

         when(mongoProperties.getUri()).thenReturn("mongodb://user:password@host.mongo.cosmos.azure.com:10255/db?ssl=true");
         when(mongoTemplate.count(query, entityClass)).thenReturn(5L); // 小于 SMALL_BATCH_THRESHOLD
         when(mongoTemplate.updateMulti(query, update, entityClass)).thenReturn(expectedResult);
         
         CustomMongoTemplate spyCustomMongoTemplate = spy(new CustomMongoTemplate(mongoDbFactory, mongoConverter, mongoProperties));

         doReturn(5L).when(spyCustomMongoTemplate).count(any(), any());
         doReturn(expectedResult).when(spyCustomMongoTemplate).updateMulti(any(Query.class), any(UpdateDefinition.class), eq(TestDomain.class));

         UpdateResult result = spyCustomMongoTemplate.updateMulti(query, update, entityClass);

         assertEquals(expectedResult, result);
        //  verify(mongoTemplate).updateMulti(query, update, entityClass); // 验证调用了 super.updateMulti
         verify(spyCustomMongoTemplate, never()).processBatchUpdate(any(), any(), any(), anyLong()); // 验证 *没有* 调用 processBatchUpdate
     }


     // 4. 测试 updateMulti() - CosmosDB 环境，小批量，原生更新失败，回退到批量更新
     @Test
     void updateMulti_cosmosDB_smallBatch_nativeUpdateFails_fallsBackToBatch() {
        Query query = new Query();
        Update update = new Update();
        Class<TestDomain> entityClass = TestDomain.class;
        UpdateResult expectedResult = UpdateResult.acknowledged(5, 5L, null);

        when(mongoProperties.getUri()).thenReturn("mongodb://user:password@host.mongo.cosmos.azure.com:10255/db?ssl=true");
        when(mongoTemplate.count(query, entityClass)).thenReturn(5L);
        when(mongoTemplate.updateMulti(query, update, entityClass)).thenThrow(new RuntimeException("Simulated failure")); // 模拟原生更新失败
         
        CustomMongoTemplate spyCustomMongoTemplate = spy(new CustomMongoTemplate(mongoDbFactory, mongoConverter, mongoProperties));
        // 模拟 processBatchUpdate 的行为
        doReturn(expectedResult).when(spyCustomMongoTemplate).processBatchUpdate(any(), any(), any(), anyLong());
        doReturn(5L).when(spyCustomMongoTemplate).count(any(),any());
        doThrow(new RuntimeException("Simulated failure")).when(spyCustomMongoTemplate).updateMulti(any(Query.class), any(UpdateDefinition.class),eq(TestDomain.class));
        UpdateResult result = spyCustomMongoTemplate.updateMulti(query, update, entityClass);

        assertEquals(expectedResult, result);
        verify(spyCustomMongoTemplate).processBatchUpdate(query, update, entityClass, 5); // 验证调用了 processBatchUpdate
     }


     // 5. 测试 updateMulti() - CosmosDB 环境，大批量
    @Test
    void updateMulti_cosmosDB_largeBatch_callsProcessBatchUpdate() {
        Query query = new Query();
        Update update = new Update();
        Class<TestDomain> entityClass = TestDomain.class;
        UpdateResult expectedResult = UpdateResult.acknowledged(100, 100L, null);

        when(mongoProperties.getUri()).thenReturn("mongodb://user:password@host.mongo.cosmos.azure.com:10255/db?ssl=true");

        CustomMongoTemplate spyCustomMongoTemplate = spy(new CustomMongoTemplate(mongoDbFactory, mongoConverter, mongoProperties));

        doReturn(100L).when(spyCustomMongoTemplate).count(any(), any());  // 返回一个较大的数量
        doReturn(expectedResult).when(spyCustomMongoTemplate).processBatchUpdate(any(), any(), any(), anyLong());

        UpdateResult result = spyCustomMongoTemplate.updateMulti(query, update, entityClass);

        assertEquals(expectedResult, result);
        verify(spyCustomMongoTemplate).processBatchUpdate(query, update, entityClass, 100); // 验证调用了 processBatchUpdate
    }

     // 6. 测试 processBatchUpdate() - 分批处理
     @Test
     void processBatchUpdate_splitsIntoBatches() {
         Query query = new Query();
         Update update = new Update();
         Class<TestDomain> entityClass = TestDomain.class;

         // 准备模拟数据
         List<TestDomain> batch1 = new ArrayList<>();
         for (int i = 0; i < 50; i++) {
             batch1.add(new TestDomain("id" + i, "name" + i));
         }
         List<TestDomain> batch2 = new ArrayList<>();
         for (int i = 50; i < 100; i++) {
             batch2.add(new TestDomain("id" + i, "name" + i));
         }

         // 模拟 find() 方法的行为
        CustomMongoTemplate spyCustomMongoTemplate = spy(new CustomMongoTemplate(mongoDbFactory, mongoConverter, mongoProperties));

        doReturn(batch1).when(spyCustomMongoTemplate).find(argThat(q -> q.getSkip() == 0), eq(entityClass));
        doReturn(batch2).when(spyCustomMongoTemplate).find(argThat(q -> q.getSkip() == 50), eq(entityClass));

         // 模拟 processSingleBatch 的行为（为了简化，假设每个批次都成功更新）
        doReturn(UpdateResult.acknowledged(50, 50L, null))
                .when(spyCustomMongoTemplate).processSingleBatch(anyList(), any(), eq(entityClass));


         // 执行测试
         UpdateResult result = spyCustomMongoTemplate.processBatchUpdate(query, update, entityClass, 100);

         // 验证
         assertEquals(100, result.getMatchedCount());
         assertEquals(100, result.getModifiedCount());
         verify(spyCustomMongoTemplate, times(2)).processSingleBatch(anyList(), any(), eq(entityClass)); // 验证 processSingleBatch 被调用了两次
     }


      //7. 测试异常
      @Test
     void updateMulti_cosmosDB_countThrowsException_exceptionPropagated() {
         Query query = new Query();
         Update update = new Update();
         Class<TestDomain> entityClass = TestDomain.class;

         when(mongoProperties.getUri()).thenReturn("mongodb://user:password@host.mongo.cosmos.azure.com:10255/db?ssl=true");
         CustomMongoTemplate spyCustomMongoTemplate = spy(new CustomMongoTemplate(mongoDbFactory, mongoConverter, mongoProperties));
         doThrow(new RuntimeException("Simulated count failure")).when(spyCustomMongoTemplate).count(query, entityClass); // 模拟 count 失败

         assertThrows(RuntimeException.class, () -> spyCustomMongoTemplate.updateMulti(query, update, entityClass));
     }
    
     // 8. getCollectionClass的测试
    @Test
    void getCollectionClass_entityFound_returnsClass() {
        String collectionName = "testCollection";
        MongoPersistentEntity<?> mockEntity = mock(MongoPersistentEntity.class);
        when(mockEntity.getCollection()).thenReturn(collectionName);
        when(mockEntity.getType()).thenReturn(TestDomain.class);

        when(mappingContext.getPersistentEntities()).thenReturn(Collections.singletonList(mockEntity));

        Class<?> result = customMongoTemplate.getCollectionClass(collectionName);
        assertEquals(TestDomain.class, result);

    }

    @Test
    void getCollectionClass_entityNotFound_returnsNullAndLogsWarning() {
        String collectionName = "nonExistentCollection";
        when(mappingContext.getPersistentEntities()).thenReturn(Collections.emptyList()); // 没有实体
        //你需要一个spy来验证log.warn
        CustomMongoTemplate spyCustomMongoTemplate = spy(customMongoTemplate);
        Class<?> result = spyCustomMongoTemplate.getCollectionClass(collectionName);
        assertNull(result);
        verify(spyCustomMongoTemplate).getCollectionClass(collectionName); //verify log
    }

    //processSingleBatch 可以根据需要添加更多测试, 尤其是异常情况
 }
