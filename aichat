{"artifactJsonType":"APPLICATION","clientSchemaVersion":2.0,"serverSchemaVersion":11.0,"exportedApplication":{"name":"Appsmith AI Chat","isPublic":false,"pages":[{"id":"Chat Widget","isDefault":true}],"publishedPages":[],"viewMode":false,"appIsExample":false,"unreadCommentThreads":0.0,"clonedFromApplicationId":"66f2d29cfb3db210c7f55e3a","unpublishedApplicationDetail":{"appPositioning":{"type":"FIXED"},"navigationSetting":{"showNavbar":true,"orientation":"top","navStyle":"stacked","position":"static","colorStyle":"light","logoAssetId":"","logoConfiguration":"applicationTitleOnly","showSignIn":true},"themeSetting":{"sizing":1.0,"density":1.0,"appMaxWidth":"LARGE"}},"publishedApplicationDetail":{"appPositioning":{"type":"FIXED"},"navigationSetting":{"showNavbar":true,"orientation":"top","navStyle":"stacked","position":"static","colorStyle":"light","logoAssetId":"","logoConfiguration":"applicationTitleOnly","showSignIn":true},"themeSetting":{"sizing":1.0,"density":1.0,"appMaxWidth":"LARGE"}},"color":"#D9E7FF","icon":"frame","slug":"appsmith-ai-chat","unpublishedAppLayout":{"type":"TABLET"},"publishedAppLayout":{"type":"TABLET"},"unpublishedCustomJSLibs":[],"publishedCustomJSLibs":[],"evaluationVersion":2.0,"applicationVersion":2.0,"embedSetting":{"height":"720px","width":"1024px","showNavigationBar":true},"collapseInvisibleWidgets":true,"isManualUpdate":false,"isCommunityTemplate":false,"deleted":false},"datasourceList":[{"datasourceConfiguration":{"url":"https://api.openai.com"},"name":"Untitled datasource 1","pluginId":"Open AI","messages":[],"isAutoGenerated":false,"gitSyncId":"67d58d9b70f499263e42e15d_4e9d666b-1387-482c-92d2-1c5cb8547dc4","deleted":false}],"customJSLibList":[],"pageList":[{"unpublishedPage":{"name":"Chat Widget","slug":"chat-widget","layouts":[{"viewMode":false,"dsl":{"widgetName":"MainContainer","backgroundColor":"none","rightColumn":1224.0,"snapColumns":64.0,"detachFromLayout":true,"widgetId":"0","topRow":0.0,"bottomRow":830.0,"containerStyle":"none","snapRows":49.0,"parentRowSpace":1.0,"type":"CANVAS_WIDGET","canExtend":true,"version":91.0,"minHeight":510.0,"parentColumnSpace":1.0,"dynamicBindingPathList":[],"leftColumn":0.0,"children":[{"needsErrorInfo":false,"boxShadow":"{{appsmith.theme.boxShadow.appBoxShadow}}","mobileBottomRow":30.0,"widgetName":"cst_chatWindow","borderColor":"#E0DEDE","srcDoc":{"html":"<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\n<!-- Chat widget container -->\n<div class=\"chat-widget\" id=\"chat-widget\">\n\t<div class=\"messages-container\" id=\"messages-container\">\n\t\t<!-- Messages will be dynamically inserted here -->\n\t</div>\n</div>","css":"body {\n  font-family: sans-serif;\n  color: #f0f0f0;\n  line-height: 1.5rem;\n  background-color: #2e2e2e;\n  height: 100%;\n}\n\n.chat-widget {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.messages-container {\n  flex: 1;\n  position: absolute;\n  top: 0;\n  padding: 1rem;\n  width: 95%;\n}\n\n.message {\n  margin: 1rem;\n  padding: 0.5rem 0.75rem;\n}\n\n.user-message {\n  background-color: #333;\n  color: #ddd;\n  margin-left: 8rem;\n  border: solid 1px #444;\n  border-radius: 0.5rem;\n  font-style: italic;\n  padding-top: 1.1rem;\n}\n\ncode {\n  border: solid 1px #555;\n  border-radius: 0.25rem;\n  margin: 0.5rem 0;\n  padding: 0.25rem;\n  background-color: #444;\n}\n\na {\n  color: yellow;\n}\n\np {\n  margin-bottom: 0.75rem;\n}\n\nol, ul {\n  list-style: initial;\n  margin-left: 1rem;\n}\n\nol {\n  list-style-type: decimal;\n}\n\nol ul ul {\n  list-style-type: square;\n}\n\nol ul {\n  list-style-type: circle;\n}","js":"import { marked } from 'https://cdn.jsdelivr.net/npm/marked@14.1.1/+esm';\n\n/**\n * Container for holding the message elements\n * @type {HTMLElement}\n */\nlet messagesContainer = document.getElementById('messages-container');\n\n/**\n * Global variable to store the ID of the last message to scroll to.\n * @type {string}\n */\nlet scrollToID = '';\n\n/**\n * Renders a message inside the messages container.\n * The message can be either from the user or from the system.\n * \n * @param {string} message - The message content in markdown format.\n * @param {boolean} isUser - A flag indicating if the message is from the user.\n * @param {number} messageIndex - The index of the message to create a unique ID.\n */\nfunction renderMessage(message, isUser, messageIndex) {\n  // Create a new div for the message\n  let messageElement = document.createElement('div');\n  // Generate a unique ID for the message element based on the message index\n  let messageID = `msg${messageIndex}`;\n  // Add the generated ID to the message element\n  messageElement.id = messageID;\n\n  // Add class 'message', and 'user-message' if the message is from the user\n  messageElement.className = 'message ' + (isUser ? 'user-message' : '');\n\n  // Convert markdown to HTML using 'marked' library and highlight code if present\n  messageElement.innerHTML = marked(message || '', {\n    highlight: function (code, language) {\n      let validLanguage = hljs.getLanguage(language) ? language : 'plaintext';\n      return hljs.highlight(validLanguage, code).value;\n    }\n  });\n\n  // Add copy icons to each code block inside the message\n  messageElement.querySelectorAll('pre code').forEach(block => {\n    // Highlight the block of code\n    hljs.highlightElement(block);\n\n    // Extract the code text and create a copy icon\n    let codeText = block.innerText;\n    let icon = addCopyIcon(codeText);\n\n    // Set the copy icon's position inside the <pre> element\n    let preElement = block.parentElement;\n    preElement.style.position = 'relative'; // Ensure the <pre> has relative positioning\n    icon.style.position = 'absolute';\n    icon.style.top = '5px';\n    icon.style.right = '5px';\n\n    // Append the copy icon to the <pre> element\n    preElement.appendChild(icon);\n  });\n\n  // Append the message element to the messages container\n  messagesContainer.appendChild(messageElement);\n\n  // Update the scrollToID if this is a user message\n  scrollToID = isUser ? messageID : scrollToID;\n}\n\n/**\n * Handles the copy event by updating the app's model and triggering a 'copy' event.\n * \n * @param {string} text - The text to be copied.\n */\nfunction handleCopy(text) {\n  // Update the app model with the copied text\n  appsmith.updateModel({\n    copyText: text\n  });\n  // Trigger a 'copy' event\n  appsmith.triggerEvent('copy');\n}\n\n/**\n * Adds a copy icon to the code block for easy copying of the code.\n * \n * @param {string} text - The text to be copied when the icon is clicked.\n * @returns {HTMLElement} - The created copy icon element.\n */\nfunction addCopyIcon(text) {\n  // Create an <i> element for the copy icon\n  let copyIcon = document.createElement('i');\n  copyIcon.className = 'fas fa-copy copy-icon'; // Font Awesome class for copy icon\n  copyIcon.style.cursor = 'pointer'; // Make the icon clickable\n\n  // Add a click event listener to trigger the copy functionality\n  copyIcon.addEventListener('click', () => {\n    handleCopy(text);\n  });\n  return copyIcon;\n}\n\n/**\n * Updates the messages in the container by rendering the chat history.\n * It clears the existing messages and re-renders them based on the chat history.\n */\nfunction updateMessages() {\n  // Fetch the chat history from the app's model\n  let chatHistory = appsmith.model.chatHistory || [];\n\n  // If no messages exist, return early\n  if (!chatHistory[0]?.message) {\n    return;\n  }\n\n  // Clear existing messages\n  messagesContainer.innerHTML = '';\n\n  // Render each message in the chat history\n  chatHistory.forEach((msg, index) => renderMessage(msg.message, msg.role === 'USER', index + 1));\n\n  // Scroll to the last message using the scrollToID\n  scrollToMessage();\n}\n\n/**\n * Scrolls to the message with the ID stored in the global scrollToID variable.\n */\nfunction scrollToMessage() {\n  // Ensure scrollToID is set before trying to scroll\n  if (scrollToID) {\n    let element = document.getElementById(scrollToID);\n    if (element) {\n      element.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start',\n        inline: \"nearest\"\n      });\n    }\n  }\n}\n\n/**\n * Initializes the app by setting up the onModelChange event listener.\n * It ensures the messages update whenever the model changes.\n */\nappsmith.onReady(() => {\n  // Listen for changes in the model and update the messages when the model changes\n  appsmith.onModelChange(() => {\n    updateMessages();\n  });\n});"},"isCanvas":false,"dynamicPropertyPathList":[],"topRow":0.0,"bottomRow":71.0,"parentRowSpace":10.0,"type":"CUSTOM_WIDGET","mobileRightColumn":64.0,"dynamicTriggerPathList":[{"key":"copy"}],"parentColumnSpace":10.328125,"dynamicBindingPathList":[{"key":"theme"},{"key":"borderRadius"},{"key":"boxShadow"},{"key":"defaultModel"}],"leftColumn":0.0,"defaultModel":"{{ \n\n{\n\tchatHistory: chat.history\n}\n\n}}","borderWidth":"1","theme":"{{appsmith.theme}}","copy":"{{copyToClipboard(cst_chatWindow.model.copyText);}}","events":["copy"],"key":"jgr6vp0gcf","backgroundColor":"#FFFFFF","rightColumn":64.0,"dynamicHeight":"FIXED","isSearchWildcard":true,"widgetId":"p9rmew8gnw","isVisible":true,"version":1.0,"uncompiledSrcDoc":{"html":"<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\n<!-- Chat widget container -->\n<div class=\"chat-widget\" id=\"chat-widget\">\n\t<div class=\"messages-container\" id=\"messages-container\">\n\t\t<!-- Messages will be dynamically inserted here -->\n\t</div>\n</div>","css":"body{\n\tfont-family: sans-serif;\n\tcolor: #f0f0f0;\n\tline-height: 1.5rem;\n\tbackground-color: #2e2e2e;\n\theight: 100%;\n}\n\n.chat-widget {\n\tdisplay: flex;\n\tflex-direction: column;\n\theight: 100%;\n}\n\n.messages-container {\n\tflex: 1;\n\tposition: absolute;\n\ttop: 0;\n\tpadding: 1rem;\n\twidth: 95%;\n}\n\n.message {\n\tmargin: 1rem;\n\tpadding: 0.5rem 0.75rem;\n}\n\n.user-message {\n\tbackground-color: #333;\n\tcolor: #ddd;\n\tmargin-left: 8rem;\n\tborder: solid 1px #444;\n\tborder-radius: 0.5rem;\n\tfont-style: italic;\n\tpadding-top: 1.1rem;\n}\n\ncode {\n\tborder: solid 1px #555;\n\tborder-radius: 0.25rem;\n\tmargin: 0.5rem 0;\n\tpadding:0.25rem;\n\tbackground-color:#444;\n}\n\na {\n\tcolor: yellow;\n}\n\np {\n\tmargin-bottom: 0.75rem;\n}\n\nol, ul {\n\tlist-style: initial;\n\tmargin-left: 1rem;\n}\n\nol {\n\tlist-style-type: decimal;\n}\n\nol ul ul {\n\tlist-style-type: square;\n}\n\nol ul {\n\tlist-style-type: circle;\n}","js":"import { marked } from 'https://cdn.jsdelivr.net/npm/marked@14.1.1/+esm';\n\n/**\n * Container for holding the message elements\n * @type {HTMLElement}\n */\nlet messagesContainer = document.getElementById('messages-container');\n\n/**\n * Global variable to store the ID of the last message to scroll to.\n * @type {string}\n */\nlet scrollToID = '';\n\n/**\n * Renders a message inside the messages container.\n * The message can be either from the user or from the system.\n * \n * @param {string} message - The message content in markdown format.\n * @param {boolean} isUser - A flag indicating if the message is from the user.\n * @param {number} messageIndex - The index of the message to create a unique ID.\n */\nfunction renderMessage(message, isUser, messageIndex) {\n\t// Create a new div for the message\n\tlet messageElement = document.createElement('div');\n\t// Generate a unique ID for the message element based on the message index\n\tlet messageID = `msg${messageIndex}`;\n\t// Add the generated ID to the message element\n\tmessageElement.id = messageID;\n\n\t// Add class 'message', and 'user-message' if the message is from the user\n\tmessageElement.className = 'message ' + (isUser ? 'user-message' : '');\n\n\t// Convert markdown to HTML using 'marked' library and highlight code if present\n\tmessageElement.innerHTML = marked(message || '', {\n\t\thighlight: function(code, language) {\n\t\t\tlet validLanguage = hljs.getLanguage(language) ? language : 'plaintext';\n\t\t\treturn hljs.highlight(validLanguage, code).value;  \n\t\t}\n\t});\n\n\t// Add copy icons to each code block inside the message\n\tmessageElement.querySelectorAll('pre code').forEach((block) => {\n\t\t// Highlight the block of code\n\t\thljs.highlightElement(block);\n\n\t\t// Extract the code text and create a copy icon\n\t\tlet codeText = block.innerText;\n\t\tlet icon = addCopyIcon(codeText);\n\n\t\t// Set the copy icon's position inside the <pre> element\n\t\tlet preElement = block.parentElement;\n\t\tpreElement.style.position = 'relative'; // Ensure the <pre> has relative positioning\n\t\ticon.style.position = 'absolute';\n\t\ticon.style.top = '5px';\n\t\ticon.style.right = '5px';\n\n\t\t// Append the copy icon to the <pre> element\n\t\tpreElement.appendChild(icon);\n\t});\n\n\t// Append the message element to the messages container\n\tmessagesContainer.appendChild(messageElement);\n\n\t// Update the scrollToID if this is a user message\n\tscrollToID = isUser ? messageID : scrollToID;\n}\n\n/**\n * Handles the copy event by updating the app's model and triggering a 'copy' event.\n * \n * @param {string} text - The text to be copied.\n */\nfunction handleCopy(text) {\n\t// Update the app model with the copied text\n\tappsmith.updateModel({ copyText: text });\n\t// Trigger a 'copy' event\n\tappsmith.triggerEvent('copy');\n}\n\n/**\n * Adds a copy icon to the code block for easy copying of the code.\n * \n * @param {string} text - The text to be copied when the icon is clicked.\n * @returns {HTMLElement} - The created copy icon element.\n */\nfunction addCopyIcon(text) {\n\t// Create an <i> element for the copy icon\n\tlet copyIcon = document.createElement('i');\n\tcopyIcon.className = 'fas fa-copy copy-icon'; // Font Awesome class for copy icon\n\tcopyIcon.style.cursor = 'pointer'; // Make the icon clickable\n\n\t// Add a click event listener to trigger the copy functionality\n\tcopyIcon.addEventListener('click', () => {\n\t\thandleCopy(text);  \n\t});\n\treturn copyIcon;\n}\n\n/**\n * Updates the messages in the container by rendering the chat history.\n * It clears the existing messages and re-renders them based on the chat history.\n */\nfunction updateMessages() {\n\t// Fetch the chat history from the app's model\n\tlet chatHistory = appsmith.model.chatHistory || [];\n\n\t// If no messages exist, return early\n\tif (!chatHistory[0]?.message) { \n\t\treturn; \n\t}\n\n\t// Clear existing messages\n\tmessagesContainer.innerHTML = '';\n\n\t// Render each message in the chat history\n\tchatHistory.forEach((msg, index) => renderMessage(msg.message, msg.role === 'USER', index + 1));\n\n\t// Scroll to the last message using the scrollToID\n\tscrollToMessage();\n}\n\n/**\n * Scrolls to the message with the ID stored in the global scrollToID variable.\n */\nfunction scrollToMessage() {\n\t// Ensure scrollToID is set before trying to scroll\n\tif (scrollToID) {\n\t\tlet element = document.getElementById(scrollToID);\n\t\tif (element) {\n\t\t\telement.scrollIntoView({ behavior: 'smooth', block: 'start', inline: \"nearest\" });\n\t\t}\n\t}\n}\n\n/**\n * Initializes the app by setting up the onModelChange event listener.\n * It ensures the messages update whenever the model changes.\n */\nappsmith.onReady(() => {\n\t// Listen for changes in the model and update the messages when the model changes\n\tappsmith.onModelChange(() => {\n\t\tupdateMessages();\n\t});\n});\n"},"parentId":"0","renderMode":"CANVAS","isLoading":false,"mobileTopRow":0.0,"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","mobileLeftColumn":41.0,"maxDynamicHeight":9000.0,"minDynamicHeight":4.0},{"boxShadow":"none","onSubmit":"{{chat.submit();}}","topRow":71.0,"labelWidth":5.0,"type":"INPUT_WIDGET_V2","animateLoading":true,"resetOnSubmit":true,"leftColumn":0.0,"dynamicBindingPathList":[{"key":"accentColor"},{"key":"borderRadius"}],"labelStyle":"BOLD","inputType":"MULTI_LINE_TEXT","isDisabled":false,"isRequired":false,"dynamicHeight":"AUTO_HEIGHT","accentColor":"{{appsmith.theme.colors.primaryColor}}","showStepArrows":false,"isVisible":true,"version":2.0,"isLoading":false,"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","originalBottomRow":79.0,"needsErrorInfo":false,"mobileBottomRow":40.0,"widgetName":"inp_userPrompt","bottomRow":79.0,"parentRowSpace":10.0,"autoFocus":false,"mobileRightColumn":20.0,"parentColumnSpace":10.328125,"dynamicTriggerPathList":[{"key":"onSubmit"}],"labelPosition":"Top","key":"yckpbptw7a","labelTextSize":"0.875rem","rightColumn":56.0,"widgetId":"96ojvs0q24","minWidth":450.0,"label":"","parentId":"0","labelAlignment":"left","renderMode":"CANVAS","mobileTopRow":33.0,"responsiveBehavior":"fill","originalTopRow":71.0,"mobileLeftColumn":0.0,"maxDynamicHeight":9000.0,"shouldAllowAutofill":false,"iconAlign":"left","defaultText":"","minDynamicHeight":4.0},{"resetFormOnClick":false,"needsErrorInfo":false,"boxShadow":"none","mobileBottomRow":40.0,"widgetName":"btn_submit","onClick":"{{chat.submit();}}","buttonColor":"{{appsmith.theme.colors.primaryColor}}","topRow":71.0,"bottomRow":75.0,"parentRowSpace":10.0,"type":"BUTTON_WIDGET","mobileRightColumn":63.0,"animateLoading":true,"parentColumnSpace":10.328125,"dynamicTriggerPathList":[{"key":"onClick"}],"leftColumn":56.0,"dynamicBindingPathList":[{"key":"buttonColor"},{"key":"borderRadius"}],"text":"","isDisabled":false,"key":"ky4x1o9am1","rightColumn":64.0,"isDefaultClickDisabled":true,"iconName":"send-message","widgetId":"tqus8uapz0","minWidth":120.0,"isVisible":true,"recaptchaType":"V3","version":1.0,"parentId":"0","renderMode":"CANVAS","isLoading":false,"mobileTopRow":36.0,"responsiveBehavior":"hug","disabledWhenInvalid":false,"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","mobileLeftColumn":47.0,"buttonVariant":"PRIMARY","iconAlign":"left","placement":"CENTER"},{"needsErrorInfo":false,"mobileBottomRow":83.0,"widgetName":"txt_poweredBy","topRow":79.0,"bottomRow":83.0,"parentRowSpace":10.0,"type":"TEXT_WIDGET","mobileRightColumn":48.0,"animateLoading":true,"overflow":"NONE","fontFamily":"{{appsmith.theme.fontFamily.appFont}}","parentColumnSpace":12.3125,"dynamicTriggerPathList":[],"leftColumn":32.0,"dynamicBindingPathList":[{"key":"truncateButtonColor"},{"key":"fontFamily"},{"key":"borderRadius"}],"shouldTruncate":false,"truncateButtonColor":"{{appsmith.theme.colors.primaryColor}}","text":"Powered by Appsmith AI","key":"x197txmntn","rightColumn":64.0,"textAlign":"RIGHT","dynamicHeight":"AUTO_HEIGHT","widgetId":"vs15g3jtho","minWidth":450.0,"isVisible":true,"fontStyle":"BOLD,ITALIC","textColor":"#231F20","version":1.0,"parentId":"0","renderMode":"CANVAS","isLoading":false,"mobileTopRow":79.0,"responsiveBehavior":"fill","originalTopRow":79.0,"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","mobileLeftColumn":32.0,"maxDynamicHeight":9000.0,"originalBottomRow":83.0,"fontSize":"0.875rem","minDynamicHeight":4.0},{"resetFormOnClick":false,"needsErrorInfo":false,"boxShadow":"none","mobileBottomRow":88.0,"widgetName":"Button1","onClick":"{{chat.reset();}}","buttonColor":"{{appsmith.theme.colors.primaryColor}}","topRow":75.0,"bottomRow":79.0,"parentRowSpace":10.0,"type":"BUTTON_WIDGET","mobileRightColumn":17.0,"animateLoading":true,"parentColumnSpace":12.3125,"dynamicTriggerPathList":[{"key":"onClick"}],"leftColumn":56.0,"dynamicBindingPathList":[{"key":"buttonColor"},{"key":"borderRadius"}],"text":"Reset","isDisabled":false,"key":"nvw4hzp8xw","rightColumn":64.0,"isDefaultClickDisabled":true,"widgetId":"tplxqb9ya1","minWidth":120.0,"isVisible":true,"recaptchaType":"V3","version":1.0,"parentId":"0","renderMode":"CANVAS","isLoading":false,"mobileTopRow":84.0,"responsiveBehavior":"hug","disabledWhenInvalid":false,"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","mobileLeftColumn":1.0,"buttonVariant":"PRIMARY","placement":"CENTER"}]},"layoutOnLoadActions":[[{"id":"Chat Widget_chat.onload","name":"chat.onload","collectionId":"Chat Widget_chat","confirmBeforeExecute":false,"pluginType":"JS","jsonPathKeys":["function () {\n  let chatHistory = appsmith.store[chat.appname];\n  if (chatHistory != undefined) {\n    chat.history = chatHistory;\n  }\n}"],"timeoutInMillisecond":10000.0}]],"layoutOnLoadActionErrors":[],"validOnPageLoadActions":true,"id":"Chat Widget","deleted":false,"policies":[],"userPermissions":[]}],"userPermissions":[],"policyMap":{},"isHidden":false},"gitSyncId":"67f25a9789a0731a53c799f9_8ca60e7b-a0d7-4c28-8d42-05323a7453ab","deleted":false}],"actionList":[{"pluginType":"JS","pluginId":"js-plugin","unpublishedAction":{"name":"test","fullyQualifiedName":"chat.test","datasource":{"name":"UNUSED_DATASOURCE","pluginId":"js-plugin","messages":[],"isAutoGenerated":false,"deleted":false,"policyMap":{},"policies":[],"userPermissions":[]},"pageId":"Chat Widget","collectionId":"Chat Widget_chat","actionConfiguration":{"timeoutInMillisecond":10000.0,"paginationType":"NONE","encodeParamsToggle":true,"body":"function () {\n  console.log(appsmith.store[chat.appname]);\n}","selfReferencingDataPaths":[],"jsArguments":[]},"executeOnLoad":false,"dynamicBindingPathList":[{"key":"body"}],"isValid":true,"invalids":[],"messages":[],"jsonPathKeys":["function () {\n  console.log(appsmith.store[chat.appname]);\n}"],"userSetOnLoad":false,"confirmBeforeExecute":false,"policyMap":{},"userPermissions":[],"createdAt":"2024-09-24T19:21:37Z"},"publishedAction":{"datasource":{"messages":[],"isAutoGenerated":false,"deleted":false,"policyMap":{},"policies":[],"userPermissions":[]},"messages":[],"userSetOnLoad":false,"confirmBeforeExecute":false,"policyMap":{},"userPermissions":[],"createdAt":"2025-04-06T10:42:31Z"},"gitSyncId":"67f25a9789a0731a53c799f9_6cd94bc4-7c9b-4663-8f2d-da72ea414156","id":"Chat Widget_chat.test","deleted":false},{"pluginType":"JS","pluginId":"js-plugin","unpublishedAction":{"name":"send","fullyQualifiedName":"chat.send","datasource":{"name":"UNUSED_DATASOURCE","pluginId":"js-plugin","messages":[],"isAutoGenerated":false,"deleted":false,"policyMap":{},"policies":[],"userPermissions":[]},"pageId":"Chat Widget","collectionId":"Chat Widget_chat","actionConfiguration":{"timeoutInMillisecond":10000.0,"paginationType":"NONE","encodeParamsToggle":true,"body":"async function () {\n  let reply = await addMessage.run();\n  let reponseMessage = reply.choices[0].message;\n  chat.messages.push(reponseMessage);\n  chat.history.push({\n    role: \"CHATBOT\",\n    message: reponseMessage.content\n  });\n  chat.totalResponses++;\n  storeValue(chat.appname, chat.history);\n}","selfReferencingDataPaths":[],"jsArguments":[]},"executeOnLoad":false,"dynamicBindingPathList":[{"key":"body"}],"isValid":true,"invalids":[],"messages":[],"jsonPathKeys":["async function () {\n  let reply = await addMessage.run();\n  let reponseMessage = reply.choices[0].message;\n  chat.messages.push(reponseMessage);\n  chat.history.push({\n    role: \"CHATBOT\",\n    message: reponseMessage.content\n  });\n  chat.totalResponses++;\n  storeValue(chat.appname, chat.history);\n}"],"userSetOnLoad":false,"confirmBeforeExecute":false,"policyMap":{},"userPermissions":[],"createdAt":"2024-09-24T16:16:32Z"},"publishedAction":{"datasource":{"messages":[],"isAutoGenerated":false,"deleted":false,"policyMap":{},"policies":[],"userPermissions":[]},"messages":[],"userSetOnLoad":false,"confirmBeforeExecute":false,"policyMap":{},"userPermissions":[],"createdAt":"2025-04-06T10:42:31Z"},"gitSyncId":"67f25a9789a0731a53c799f9_475d0faf-b5cb-4579-abd4-ec0586ffc2f5","id":"Chat Widget_chat.send","deleted":false},{"pluginType":"JS","pluginId":"js-plugin","unpublishedAction":{"name":"totalResponses","fullyQualifiedName":"chat.totalResponses","datasource":{"name":"UNUSED_DATASOURCE","pluginId":"js-plugin","messages":[],"isAutoGenerated":false,"deleted":false,"policyMap":{},"policies":[],"userPermissions":[]},"pageId":"Chat Widget","collectionId":"Chat Widget_chat","actionConfiguration":{"timeoutInMillisecond":10000.0,"paginationType":"NONE","encodeParamsToggle":true,"body":"function () {\n  return chat.history.filter(item => item.role === \"USER\").length;\n}","selfReferencingDataPaths":[],"jsArguments":[]},"executeOnLoad":false,"dynamicBindingPathList":[{"key":"body"}],"isValid":true,"invalids":[],"messages":[],"jsonPathKeys":["function () {\n  return chat.history.filter(item => item.role === \"USER\").length;\n}"],"userSetOnLoad":false,"confirmBeforeExecute":false,"policyMap":{},"userPermissions":[],"createdAt":"2024-09-24T19:25:37Z"},"publishedAction":{"datasource":{"messages":[],"isAutoGenerated":false,"deleted":false,"policyMap":{},"policies":[],"userPermissions":[]},"messages":[],"userSetOnLoad":false,"confirmBeforeExecute":false,"policyMap":{},"userPermissions":[],"createdAt":"2025-04-06T10:42:31Z"},"gitSyncId":"67f25a9789a0731a53c799f9_ae0e815a-8cc4-4941-b6b2-3d2410a1fb07","id":"Chat Widget_chat.totalResponses","deleted":false},{"pluginType":"JS","pluginId":"js-plugin","unpublishedAction":{"name":"submit","fullyQualifiedName":"chat.submit","datasource":{"name":"UNUSED_DATASOURCE","pluginId":"js-plugin","messages":[],"isAutoGenerated":false,"deleted":false,"policyMap":{},"policies":[],"userPermissions":[]},"pageId":"Chat Widget","collectionId":"Chat Widget_chat","actionConfiguration":{"timeoutInMillisecond":10000.0,"paginationType":"NONE","encodeParamsToggle":true,"body":"async function () {\n  let newMessage = {\n    role: \"USER\",\n    message: inp_userPrompt.text\n  };\n  chat.history.push(newMessage);\n  let requestMessage = {\n    \"role\": \"user\",\n    \"content\": inp_userPrompt.text\n  };\n  chat.messages.push(requestMessage);\n  await chat.send();\n  resetWidget('inp_userPrompt');\n  return chat.history;\n}","selfReferencingDataPaths":[],"jsArguments":[]},"executeOnLoad":false,"dynamicBindingPathList":[{"key":"body"}],"isValid":true,"invalids":[],"messages":[],"jsonPathKeys":["async function () {\n  let newMessage = {\n    role: \"USER\",\n    message: inp_userPrompt.text\n  };\n  chat.history.push(newMessage);\n  let requestMessage = {\n    \"role\": \"user\",\n    \"content\": inp_userPrompt.text\n  };\n  chat.messages.push(requestMessage);\n  await chat.send();\n  resetWidget('inp_userPrompt');\n  return chat.history;\n}"],"userSetOnLoad":false,"confirmBeforeExecute":false,"policyMap":{},"userPermissions":[],"createdAt":"2024-09-16T17:11:33Z"},"publishedAction":{"datasource":{"messages":[],"isAutoGenerated":false,"deleted":false,"policyMap":{},"policies":[],"userPermissions":[]},"messages":[],"userSetOnLoad":false,"confirmBeforeExecute":false,"policyMap":{},"userPermissions":[],"createdAt":"2025-04-06T10:42:31Z"},"gitSyncId":"67f25a9789a0731a53c799f9_ad949b83-fe6c-4c45-892e-826270939676","id":"Chat Widget_chat.submit","deleted":false},{"pluginType":"JS","pluginId":"js-plugin","unpublishedAction":{"name":"onload","fullyQualifiedName":"chat.onload","datasource":{"name":"UNUSED_DATASOURCE","pluginId":"js-plugin","messages":[],"isAutoGenerated":false,"deleted":false,"policyMap":{},"policies":[],"userPermissions":[]},"pageId":"Chat Widget","collectionId":"Chat Widget_chat","actionConfiguration":{"timeoutInMillisecond":10000.0,"paginationType":"NONE","encodeParamsToggle":true,"body":"function () {\n  let chatHistory = appsmith.store[chat.appname];\n  if (chatHistory != undefined) {\n    chat.history = chatHistory;\n  }\n}","selfReferencingDataPaths":[],"jsArguments":[]},"executeOnLoad":true,"dynamicBindingPathList":[{"key":"body"}],"isValid":true,"invalids":[],"messages":[],"jsonPathKeys":["function () {\n  let chatHistory = appsmith.store[chat.appname];\n  if (chatHistory != undefined) {\n    chat.history = chatHistory;\n  }\n}"],"userSetOnLoad":true,"confirmBeforeExecute":false,"policyMap":{},"userPermissions":[],"createdAt":"2024-09-24T16:18:47Z"},"publishedAction":{"datasource":{"messages":[],"isAutoGenerated":false,"deleted":false,"policyMap":{},"policies":[],"userPermissions":[]},"messages":[],"userSetOnLoad":false,"confirmBeforeExecute":false,"policyMap":{},"userPermissions":[],"createdAt":"2025-04-06T10:42:31Z"},"gitSyncId":"67f25a9789a0731a53c799f9_92459d0d-3920-4723-bd98-57f436118591","id":"Chat Widget_chat.onload","deleted":false},{"pluginType":"JS","pluginId":"js-plugin","unpublishedAction":{"name":"reset","fullyQualifiedName":"chat.reset","datasource":{"name":"UNUSED_DATASOURCE","pluginId":"js-plugin","messages":[],"isAutoGenerated":false,"deleted":false,"policyMap":{},"policies":[],"userPermissions":[]},"pageId":"Chat Widget","collectionId":"Chat Widget_chat","actionConfiguration":{"timeoutInMillisecond":10000.0,"paginationType":"NONE","encodeParamsToggle":true,"body":"function () {\n  removeValue(chat.appname);\n  chat.totalResponses = 0;\n  chat.history = [{\n    role: \"CHATBOT\",\n    message: \"How can I help you today?\"\n  }];\n  chat.messages = [{\n    \"role\": \"assistant\",\n    content: \"How can I help you today?\"\n  }];\n}","selfReferencingDataPaths":[],"jsArguments":[]},"executeOnLoad":false,"dynamicBindingPathList":[{"key":"body"}],"isValid":true,"invalids":[],"messages":[],"jsonPathKeys":["function () {\n  removeValue(chat.appname);\n  chat.totalResponses = 0;\n  chat.history = [{\n    role: \"CHATBOT\",\n    message: \"How can I help you today?\"\n  }];\n  chat.messages = [{\n    \"role\": \"assistant\",\n    content: \"How can I help you today?\"\n  }];\n}"],"userSetOnLoad":false,"confirmBeforeExecute":false,"policyMap":{},"userPermissions":[],"createdAt":"2024-09-24T19:14:48Z"},"publishedAction":{"datasource":{"messages":[],"isAutoGenerated":false,"deleted":false,"policyMap":{},"policies":[],"userPermissions":[]},"messages":[],"userSetOnLoad":false,"confirmBeforeExecute":false,"policyMap":{},"userPermissions":[],"createdAt":"2025-04-06T10:42:31Z"},"gitSyncId":"67f25a9789a0731a53c799f9_1aa2a15e-55c6-4a7c-a65e-82ca9ec045cf","id":"Chat Widget_chat.reset","deleted":false},{"pluginType":"AI","pluginId":"Open AI","unpublishedAction":{"name":"addMessage","datasource":{"name":"Untitled datasource 1","pluginId":"Open AI","messages":[],"isAutoGenerated":false,"id":"Untitled datasource 1","deleted":false,"policyMap":{},"policies":[],"userPermissions":[]},"pageId":"Chat Widget","actionConfiguration":{"timeoutInMillisecond":60000.0,"paginationType":"NONE","encodeParamsToggle":true,"selfReferencingDataPaths":[],"formData":{"command":{"data":"CHAT"},"chatModel":{"data":"qwen-max","componentData":"","viewType":"json"},"maxTokens":"65536","temperature":"0.1","embeddingsModel":{"data":""},"encodingFormat":"float","visionModel":{"data":""},"messages":{"data":"{{chat.messages}}","componentData":[{"role":"user","content":""}],"viewType":"json"}}},"executeOnLoad":false,"dynamicBindingPathList":[{"key":"formData.messages.data"}],"isValid":true,"invalids":[],"messages":[],"jsonPathKeys":["chat.messages"],"userSetOnLoad":false,"confirmBeforeExecute":false,"policyMap":{},"userPermissions":[],"createdAt":"2025-04-06T12:10:01Z"},"publishedAction":{"datasource":{"messages":[],"isAutoGenerated":false,"deleted":false,"policyMap":{},"policies":[],"userPermissions":[]},"messages":[],"userSetOnLoad":false,"confirmBeforeExecute":false,"policyMap":{},"userPermissions":[],"createdAt":"2025-04-06T12:10:01Z"},"gitSyncId":"67f25afee177bc2c475adb6f_4c9766ce-4cb8-49d8-9505-6e3b690ea230","id":"Chat Widget_addMessage","deleted":false}],"actionCollectionList":[{"unpublishedCollection":{"name":"chat","pageId":"Chat Widget","pluginId":"js-plugin","pluginType":"JS","actions":[],"archivedActions":[],"body":"export default {\n\tappname: \"appsmith-chat-widget\",\n\t// Store the max and total reponses to limit public usage.\n  // Set this to zero to disable.\n\tmaxResponses: 5,\n\t// This stores the total chat history, and will be modified as the user asks questions\n\thistory: [{role: \"CHATBOT\", message: \"How can I help you today?\"}],\n\tmessages:[{\"role\": \"assistant\", content: \"How can I help you today?\"}],\n\t// The main function - send the user prompt to the AI and add the result to the history for viewing.\n\tasync submit(){\n\t\tlet newMessage = { role: \"USER\", message: inp_userPrompt.text };\n\t\tthis.history.push(newMessage);\n\t\tlet requestMessage = { \"role\": \"user\", \"content\": inp_userPrompt.text };\n\t\tthis.messages.push(requestMessage);\n\n\t\t// Send the user prompt to the AI\n\t\tawait this.send();\n\n\t\t// Reset the input widget and prepare for the next prompt.\n\t\tresetWidget('inp_userPrompt');\n\t\treturn this.history;\n\t},\n\n\tasync send() {\n\t\t// Only send the message if the user is under the max amount.\n\t\t\tlet reply = await addMessage.run();\n\t\t\t\n\t\t\tlet reponseMessage = reply.choices[0].message;\n\t\t\tthis.messages.push(reponseMessage);\n\t\t\tthis.history.push({role:\"CHATBOT\", message: reponseMessage.content});\n\t\t\tthis.totalResponses ++;\n\t\t\tstoreValue(this.appname, this.history);\n\t\t\n\t\t\n\t},\n\t\n\ttotalResponses() {\n\t\treturn this.history.filter(item => item.role === \"USER\").length;\n\t},\n\n\tonload() {\n\t\tlet chatHistory = appsmith.store[this.appname];\n\t\tif (chatHistory != undefined) {\n\t\t\tthis.history = chatHistory;\n\t\t}\n\t},\n\n\treset() {\n\t\tremoveValue(this.appname);\n\t\tthis.totalResponses = 0;\n\t\tthis.history = [{role: \"CHATBOT\", message: \"How can I help you today?\"}];\n\t\tthis.messages = [{\"role\": \"assistant\", content: \"How can I help you today?\"}];\n\t},\n\t\n\ttest() {\n\t\tconsole.log(appsmith.store[this.appname]);\n\t}\n\n}","variables":[{"name":"appname","value":"\"appsmith-chat-widget\""},{"name":"maxResponses","value":"5"},{"name":"history","value":"[{\n  role: \"CHATBOT\",\n  message: \"How can I help you today?\"\n}]"},{"name":"messages","value":"[{\n  \"role\": \"assistant\",\n  content: \"How can I help you today?\"\n}]"}],"userPermissions":[]},"gitSyncId":"67f25a9789a0731a53c799f9_49d346ce-b373-46b5-bff6-d44bcb36a671","id":"Chat Widget_chat","deleted":false}],"editModeTheme":{"name":"Default-New","displayName":"Modern","config":{"order":1.0,"colors":{"primaryColor":"#553DE9","backgroundColor":"#F8FAFC"},"borderRadius":{"appBorderRadius":{"none":"0px","M":"0.375rem","L":"1.5rem"}},"boxShadow":{"appBoxShadow":{"none":"none","S":"0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)","M":"0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)","L":"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)"}},"fontFamily":{"appFont":["System Default","Nunito Sans","Poppins","Inter","Montserrat","Noto Sans","Open Sans","Roboto","Rubik","Ubuntu"]}},"properties":{"colors":{"primaryColor":"#11a37f","backgroundColor":"#f4f4f5"},"borderRadius":{"appBorderRadius":"0.375rem"},"boxShadow":{"appBoxShadow":"0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)"},"fontFamily":{"appFont":"System Default"}},"stylesheet":{"AUDIO_RECORDER_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"BUTTON_WIDGET":{"buttonColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"BUTTON_GROUP_WIDGET":{"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none","childStylesheet":{"button":{"buttonColor":"{{appsmith.theme.colors.primaryColor}}"}}},"CAMERA_WIDGET":{"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"CHART_WIDGET":{"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"{{appsmith.theme.boxShadow.appBoxShadow}}","accentColor":"{{appsmith.theme.colors.primaryColor}}","fontFamily":"{{appsmith.theme.fontFamily.appFont}}"},"CHECKBOX_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}"},"CHECKBOX_GROUP_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}"},"CONTAINER_WIDGET":{"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"{{appsmith.theme.boxShadow.appBoxShadow}}"},"CIRCULAR_PROGRESS_WIDGET":{"fillColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}"},"CURRENCY_INPUT_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"PHONE_INPUT_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"DATE_PICKER_WIDGET2":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"FILE_PICKER_WIDGET_V2":{"buttonColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"FORM_WIDGET":{"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"{{appsmith.theme.boxShadow.appBoxShadow}}"},"FORM_BUTTON_WIDGET":{"buttonColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"ICON_BUTTON_WIDGET":{"buttonColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"IFRAME_WIDGET":{"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"{{appsmith.theme.boxShadow.appBoxShadow}}"},"IMAGE_WIDGET":{"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"INPUT_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"INPUT_WIDGET_V2":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"JSON_FORM_WIDGET":{"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"{{appsmith.theme.boxShadow.appBoxShadow}}","submitButtonStyles":{"buttonColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"resetButtonStyles":{"buttonColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"childStylesheet":{"ARRAY":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none","cellBorderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","cellBoxShadow":"none"},"OBJECT":{"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none","cellBorderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","cellBoxShadow":"none"},"CHECKBOX":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}"},"CURRENCY_INPUT":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"DATEPICKER":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"EMAIL_INPUT":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"MULTISELECT":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"MULTILINE_TEXT_INPUT":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"NUMBER_INPUT":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"PASSWORD_INPUT":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"PHONE_NUMBER_INPUT":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"RADIO_GROUP":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","boxShadow":"none"},"SELECT":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"SWITCH":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","boxShadow":"none"},"TEXT_INPUT":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"}}},"LIST_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"{{appsmith.theme.boxShadow.appBoxShadow}}"},"MAP_WIDGET":{"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"{{appsmith.theme.boxShadow.appBoxShadow}}"},"MAP_CHART_WIDGET":{"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"{{appsmith.theme.boxShadow.appBoxShadow}}","fontFamily":"{{appsmith.theme.fontFamily.appFont}}"},"MENU_BUTTON_WIDGET":{"menuColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"MODAL_WIDGET":{"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"MULTI_SELECT_TREE_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"MULTI_SELECT_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"MULTI_SELECT_WIDGET_V2":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"DROP_DOWN_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"PROGRESSBAR_WIDGET":{"fillColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}"},"PROGRESS_WIDGET":{"fillColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}"},"CODE_SCANNER_WIDGET":{"buttonColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"RATE_WIDGET":{"activeColor":"{{appsmith.theme.colors.primaryColor}}"},"RADIO_GROUP_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","boxShadow":"none"},"RICH_TEXT_EDITOR_WIDGET":{"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"{{appsmith.theme.boxShadow.appBoxShadow}}"},"STATBOX_WIDGET":{"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"{{appsmith.theme.boxShadow.appBoxShadow}}"},"SWITCH_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","boxShadow":"none"},"SWITCH_GROUP_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}"},"SELECT_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"TABLE_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"{{appsmith.theme.boxShadow.appBoxShadow}}","childStylesheet":{"button":{"buttonColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"menuButton":{"menuColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"iconButton":{"buttonColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"}}},"TABLE_WIDGET_V2":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"{{appsmith.theme.boxShadow.appBoxShadow}}","childStylesheet":{"button":{"buttonColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"menuButton":{"menuColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"iconButton":{"buttonColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"editActions":{"saveButtonColor":"{{appsmith.theme.colors.primaryColor}}","saveBorderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","discardButtonColor":"{{appsmith.theme.colors.primaryColor}}","discardBorderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}"}}},"TABS_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"{{appsmith.theme.boxShadow.appBoxShadow}}"},"TEXT_WIDGET":{"truncateButtonColor":"{{appsmith.theme.colors.primaryColor}}","fontFamily":"{{appsmith.theme.fontFamily.appFont}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}"},"VIDEO_WIDGET":{"borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"{{appsmith.theme.boxShadow.appBoxShadow}}"},"SINGLE_SELECT_TREE_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}","borderRadius":"{{appsmith.theme.borderRadius.appBorderRadius}}","boxShadow":"none"},"CATEGORY_SLIDER_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}"},"NUMBER_SLIDER_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}"},"RANGE_SLIDER_WIDGET":{"accentColor":"{{appsmith.theme.colors.primaryColor}}"}},"isSystemTheme":false,"deleted":false},"publishedTheme":{"name":"Default-New","displayName":"Modern","isSystemTheme":true,"deleted":false}}
